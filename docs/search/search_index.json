{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Hascal is a general-purpose open source programming language that makes it easy to build simple,optimal, reliable, and efficient software. Installation Prequistes : python v3.8 or higher pyinstaller GCC/G++ on your $PATH First clone Hascal's source : $ git clone https://github.com/hascal/hascal Install prequistes(not gcc only python libs,if you already installed prequistes, skip this part): $ make deps Build hascal excutable file : On POSIX(Linux,MacOS,BSDs) : $ make On Windows : $ make windows Now your Hascal compiler is ready to use in src/dist folder!!! NOTE: But you can add Hascal to $PATH for easily use. Hello World function main() : int { print(\"Hello World\") return 0 } Save this snippet into a file named hello.has . Now do: hascal hello.has . Congratulations - you just wrote and executed your first Hascal program! As in many other languages (such as C++ and Rust), main is the entry point of your program. print is one of the few built-in functions. It prints the value passed to it to standard output. Comments # This is a single line command Variables var foo : int var foobar : int = 1 var bar = 1 function main() : int { print(foo,foobar) return 0 } Functions function add(x:int,y:int): int { return x + y } # overloading function function add(x:int,y:int,z:int): int { return x + y + z } function add2(x:int,y:int){ print(x + y) } function main(): int { print(add(1,2)) print(add(1,2,3)) } Again, the type comes after : and : comes after the argument's name. Hascal Types Primitive types bool # boolean value string # string literal int # integer value float # floating point double # double floating point(soon) Strings function main() : int { var text = \"Hello World\" print(text[0]) # output : H var text2 = \"Hello\\tWorld\" print(text2) # output : Hello World return 0 } String operators function main() : int { var text = \"Hello \" print(text + \"World\") # output : Hello World return 0 } All operators in Hascal must have values of the same type on both sides. You cannot concatenate an integer to a string: function main() : int { var text = \"age = \" var age = 23 print(text + age) # error : Mismatched type 'string' and 'int' :2 return 0 } We have to either convert age to a string: function main() : int { var text = \"age = \" var age = 23 print(text + to_string(age)) # error : Mismatched type 'string' and 'int' :3 return 0 } Numbers function main() : int { var a : int = 123 # or : var a = 123 var b : float = 1.23 # or : var b = 1.24 return 0 } This will assign the value of 123 to a and 1.23 to b . Arrays Basic Array Concepts Arrays are collections of data elements of the same type. They can be represented by a list of elements surrounded by brackets. The elements can be accessed by appending an index (starting with 0) in brackets to the array variable: function main() : int { var a = [1,2,3] # int array with length 3 var b = [1.0,2.0,3.0] # float array with length 3 print(a[0]) a[0] = 4 print(a[0]) return 0 } Array Initialization The basic initialization syntax is as described above. The type of an array is determined by the first element: [1, 2, 3] is an array of ints ( [int] ). [\"a\", \"b\"] is an array of strings ( [string] ). Array Size You can get length of array's elements with len function : function main() : int { var a = [1,2,3] print(len(a)) # output : 3 } Importing Libraries Libraries can imported with use keyword : use os function main() : int { system(\"gcc --version\") return 0 } If you want to import a local library, you can use local keyword : local use addlib #import add() function main() : int { print(add(1,2)) return 0 } If local use addlib #import add() var x = 1 var y = 2 function main() : int { if x == y { # something } else if not x != y { # something } else if x == y and x != 2 { # something } else if x != y or x == 10 { # something } else { # something } return 0 } if statements are pretty straightforward and similar to most other languages. Unlike other C-like languages, there are no parentheses surrounding the condition and the braces are always required. You can see Hascal's conditional operators, here For Loop function main() : int { var a = [1,2,3] for i in a { print(i) # prints elements of `a` variable } return 0 } While Loop function main() : int { var a = 1 while a <= 100 { print(a) a = a + 1 } return 0 } Structs struct Color { var r : int var g : int var b : int var name = \"Transparent\" # optional value } function main() : int { var a : Color a.r = 1 a.g = 110 a.b = 255 print(a.r,a.g,a.b) var b = Color(34,156,255,\"AColor\") return 0 }","title":"Hascal Documentation"},{"location":"#introduction","text":"Hascal is a general-purpose open source programming language that makes it easy to build simple,optimal, reliable, and efficient software.","title":"Introduction"},{"location":"#installation","text":"Prequistes : python v3.8 or higher pyinstaller GCC/G++ on your $PATH First clone Hascal's source : $ git clone https://github.com/hascal/hascal Install prequistes(not gcc only python libs,if you already installed prequistes, skip this part): $ make deps Build hascal excutable file : On POSIX(Linux,MacOS,BSDs) : $ make On Windows : $ make windows Now your Hascal compiler is ready to use in src/dist folder!!! NOTE: But you can add Hascal to $PATH for easily use.","title":"Installation"},{"location":"#hello-world","text":"function main() : int { print(\"Hello World\") return 0 } Save this snippet into a file named hello.has . Now do: hascal hello.has . Congratulations - you just wrote and executed your first Hascal program! As in many other languages (such as C++ and Rust), main is the entry point of your program. print is one of the few built-in functions. It prints the value passed to it to standard output.","title":"Hello World"},{"location":"#comments","text":"# This is a single line command","title":"Comments"},{"location":"#variables","text":"var foo : int var foobar : int = 1 var bar = 1 function main() : int { print(foo,foobar) return 0 }","title":"Variables"},{"location":"#functions","text":"function add(x:int,y:int): int { return x + y } # overloading function function add(x:int,y:int,z:int): int { return x + y + z } function add2(x:int,y:int){ print(x + y) } function main(): int { print(add(1,2)) print(add(1,2,3)) } Again, the type comes after : and : comes after the argument's name.","title":"Functions"},{"location":"#hascal-types","text":"","title":"Hascal Types"},{"location":"#primitive-types","text":"bool # boolean value string # string literal int # integer value float # floating point double # double floating point(soon)","title":"Primitive types"},{"location":"#strings","text":"function main() : int { var text = \"Hello World\" print(text[0]) # output : H var text2 = \"Hello\\tWorld\" print(text2) # output : Hello World return 0 }","title":"Strings"},{"location":"#string-operators","text":"function main() : int { var text = \"Hello \" print(text + \"World\") # output : Hello World return 0 } All operators in Hascal must have values of the same type on both sides. You cannot concatenate an integer to a string: function main() : int { var text = \"age = \" var age = 23 print(text + age) # error : Mismatched type 'string' and 'int' :2 return 0 } We have to either convert age to a string: function main() : int { var text = \"age = \" var age = 23 print(text + to_string(age)) # error : Mismatched type 'string' and 'int' :3 return 0 }","title":"String operators"},{"location":"#numbers","text":"function main() : int { var a : int = 123 # or : var a = 123 var b : float = 1.23 # or : var b = 1.24 return 0 } This will assign the value of 123 to a and 1.23 to b .","title":"Numbers"},{"location":"#arrays","text":"","title":"Arrays"},{"location":"#basic-array-concepts","text":"Arrays are collections of data elements of the same type. They can be represented by a list of elements surrounded by brackets. The elements can be accessed by appending an index (starting with 0) in brackets to the array variable: function main() : int { var a = [1,2,3] # int array with length 3 var b = [1.0,2.0,3.0] # float array with length 3 print(a[0]) a[0] = 4 print(a[0]) return 0 }","title":"Basic Array Concepts"},{"location":"#array-initialization","text":"The basic initialization syntax is as described above. The type of an array is determined by the first element: [1, 2, 3] is an array of ints ( [int] ). [\"a\", \"b\"] is an array of strings ( [string] ).","title":"Array Initialization"},{"location":"#array-size","text":"You can get length of array's elements with len function : function main() : int { var a = [1,2,3] print(len(a)) # output : 3 }","title":"Array Size"},{"location":"#importing-libraries","text":"Libraries can imported with use keyword : use os function main() : int { system(\"gcc --version\") return 0 } If you want to import a local library, you can use local keyword : local use addlib #import add() function main() : int { print(add(1,2)) return 0 }","title":"Importing Libraries"},{"location":"#if","text":"local use addlib #import add() var x = 1 var y = 2 function main() : int { if x == y { # something } else if not x != y { # something } else if x == y and x != 2 { # something } else if x != y or x == 10 { # something } else { # something } return 0 } if statements are pretty straightforward and similar to most other languages. Unlike other C-like languages, there are no parentheses surrounding the condition and the braces are always required. You can see Hascal's conditional operators, here","title":"If"},{"location":"#for-loop","text":"function main() : int { var a = [1,2,3] for i in a { print(i) # prints elements of `a` variable } return 0 }","title":"For Loop"},{"location":"#while-loop","text":"function main() : int { var a = 1 while a <= 100 { print(a) a = a + 1 } return 0 }","title":"While Loop"},{"location":"#structs","text":"struct Color { var r : int var g : int var b : int var name = \"Transparent\" # optional value } function main() : int { var a : Color a.r = 1 a.g = 110 a.b = 255 print(a.r,a.g,a.b) var b = Color(34,156,255,\"AColor\") return 0 }","title":"Structs"},{"location":"cond_op/","text":"Conditional Operators Operator Description Example == Returns true if the operands are equal. var1 == var2 != Returns true if the operands are not equal. var1 != var2 > Returns true if the left operand is greater than the right operand. var1 > var2 >= Returns true if the left operand is greater than or equal to the right operand. var1 >= var2 < Returns true if the left operand is less than the right operand. var1 < var2 <= Returns true if the left operand is less than or equal to the right operand. var1 <= var2 and Returns true if the left operand and right operand are true var1 == 1 and var2 == 2 or Returns true if the left operand or right operand are true var1 == 1 or var2 == 2 not Returns true if the operand are false or if the operand is true returns false not true","title":"Conditional Operators"},{"location":"cond_op/#conditional-operators","text":"Operator Description Example == Returns true if the operands are equal. var1 == var2 != Returns true if the operands are not equal. var1 != var2 > Returns true if the left operand is greater than the right operand. var1 > var2 >= Returns true if the left operand is greater than or equal to the right operand. var1 >= var2 < Returns true if the left operand is less than the right operand. var1 < var2 <= Returns true if the left operand is less than or equal to the right operand. var1 <= var2 and Returns true if the left operand and right operand are true var1 == 1 and var2 == 2 or Returns true if the left operand or right operand are true var1 == 1 or var2 == 2 not Returns true if the operand are false or if the operand is true returns false not true","title":"Conditional Operators"},{"location":"interfacing/","text":"Interfacing to C/C++ You can use C and C++ in Hascal. For example, we want to write a function for print abs of a value in c++ and use it in hascal, first create a folder with cpp name and create absprint.cc and absprint.hpp in created folder. absprint.cc : void absprint(int a){ std::cout << abs(a); } For use abs() function we should import it from c++ stdlib, for this purpose import it in absprint.hpp : absprint.hpp #include <cmath> Now can import this code in hascal, write this code in root folder of your project: local use cpp.absprint function absprint(a:int) : int function main() : int { absprint(-68) # output : 68 } You can write inline function,structs,... defines, in an external hascal file and import it in main file : absprint.has : local use cpp.absprint function absprint(a:int) : int main.has : local use absprint function main() : int { absprint(-68) # output : 68 }","title":"Interfacing to C\\C++"},{"location":"interfacing/#interfacing-to-cc","text":"You can use C and C++ in Hascal. For example, we want to write a function for print abs of a value in c++ and use it in hascal, first create a folder with cpp name and create absprint.cc and absprint.hpp in created folder. absprint.cc : void absprint(int a){ std::cout << abs(a); } For use abs() function we should import it from c++ stdlib, for this purpose import it in absprint.hpp : absprint.hpp #include <cmath> Now can import this code in hascal, write this code in root folder of your project: local use cpp.absprint function absprint(a:int) : int function main() : int { absprint(-68) # output : 68 } You can write inline function,structs,... defines, in an external hascal file and import it in main file : absprint.has : local use cpp.absprint function absprint(a:int) : int main.has : local use absprint function main() : int { absprint(-68) # output : 68 }","title":"Interfacing to C/C++"},{"location":"stdlib/","text":"Hascal Standard Library Built-in Functions file os time math Built-in functions print(...) Standard Hascal's print function example : print(\"Hello World\"); ReadStr() : string Read string values from stdin example : print(\"What's your name ?\"); var name = ReadStr(); print(\"Hi,\",name); ReadInt() : int Read int values from stdin example : print(\"What's your age ?\"); var name = ReadInt(); print(\"your age :\",name); ReadChar() : char Read a character from stdin example : print(\"char :\",ReadChar()); ReadBool() : bool Read a bool values from stdin example : print(\"bool :\",ReadBool()); ReadFloat() : float Read float values from stdin example : print(\"float :\",ReadFloat()); to_int(input:Type) : int Convert values to int example : print(to_int(\"123456\")); to_string(input:Type) : string Convert values to string example : print(to_string(123)); to_float(input:Type) : float Convert values to float example : print(to_float(\"3.14\")); exit(exit_code:int) End program example: print(\"Hello\"); exit(0); print(\"Bye\"); file read_file(file_name:string) : string Read from file example : var content : string = read_file(\"todo.txt\"); write_file(path:string,text:string) : bool Write to file example : write_file(\"todo.txt\",\"- Going to gym\") <!-- ### listdir(path:string) : [string] Lists dirs,files on a path example : <pre> print(listdir(\"C:\\\\\")); ``` --> ## `os` ### os_name() : string Gets type of OS(win32,linux,freebsd,macos,...) print(os_name()); ### system(command:string) Excutes a terminal command example : var comm = \"\"; while true { print2(\"MyCMD>>>\"); comm = ReadStr(); system(comm); } ``` ## `time` - `get_year():int` : Get current year - `get_month():int` : Get current month - `get_day():int` : Get current day - `get_hour():int` : Get current hour - `get_minute():int` : Get current minute - `get_second():int` : Get current second ## `math` Math Functions - `sin(val:float):float` : Returns sine of x - `cos(val:float):float` : Returns cosine of x - `tan(val:float):float` : Returns tangent of x - `PI : float` : PI number - `fmax(x:float,y:float):float` : Returns the larger of x and y(floating point). - `fmin(x:float,y:float):float` : Returns the smaller of x and y(floating point). - `max(x:int,y:int):int` : Returns the larger of x and y. - `min(x:int,y:int):int` : Returns the smaller of x and y. - `abs(x:float):float` : Calculates the absolute value of a number.","title":"Standard Library"},{"location":"stdlib/#hascal-standard-library","text":"Built-in Functions file os time math","title":"Hascal Standard Library"},{"location":"stdlib/#built-in-functions","text":"","title":"Built-in functions"},{"location":"stdlib/#print","text":"Standard Hascal's print function example : print(\"Hello World\");","title":"print(...)"},{"location":"stdlib/#readstr-string","text":"Read string values from stdin example : print(\"What's your name ?\"); var name = ReadStr(); print(\"Hi,\",name);","title":"ReadStr() : string"},{"location":"stdlib/#readint-int","text":"Read int values from stdin example : print(\"What's your age ?\"); var name = ReadInt(); print(\"your age :\",name);","title":"ReadInt() : int"},{"location":"stdlib/#readchar-char","text":"Read a character from stdin example : print(\"char :\",ReadChar());","title":"ReadChar() : char"},{"location":"stdlib/#readbool-bool","text":"Read a bool values from stdin example : print(\"bool :\",ReadBool());","title":"ReadBool() : bool"},{"location":"stdlib/#readfloat-float","text":"Read float values from stdin example : print(\"float :\",ReadFloat());","title":"ReadFloat() : float"},{"location":"stdlib/#to_intinputtype-int","text":"Convert values to int example : print(to_int(\"123456\"));","title":"to_int(input:Type) : int"},{"location":"stdlib/#to_stringinputtype-string","text":"Convert values to string example : print(to_string(123));","title":"to_string(input:Type) : string"},{"location":"stdlib/#to_floatinputtype-float","text":"Convert values to float example : print(to_float(\"3.14\"));","title":"to_float(input:Type) : float"},{"location":"stdlib/#exitexit_codeint","text":"End program example: print(\"Hello\"); exit(0); print(\"Bye\");","title":"exit(exit_code:int)"},{"location":"stdlib/#file","text":"","title":"file"},{"location":"stdlib/#read_filefile_namestring-string","text":"Read from file example : var content : string = read_file(\"todo.txt\");","title":"read_file(file_name:string) : string"},{"location":"stdlib/#write_filepathstringtextstring-bool","text":"Write to file example : write_file(\"todo.txt\",\"- Going to gym\") <!-- ### listdir(path:string) : [string] Lists dirs,files on a path example : <pre> print(listdir(\"C:\\\\\")); ``` --> ## `os` ### os_name() : string Gets type of OS(win32,linux,freebsd,macos,...) print(os_name()); ### system(command:string) Excutes a terminal command example : var comm = \"\"; while true { print2(\"MyCMD>>>\"); comm = ReadStr(); system(comm); } ``` ## `time` - `get_year():int` : Get current year - `get_month():int` : Get current month - `get_day():int` : Get current day - `get_hour():int` : Get current hour - `get_minute():int` : Get current minute - `get_second():int` : Get current second ## `math` Math Functions - `sin(val:float):float` : Returns sine of x - `cos(val:float):float` : Returns cosine of x - `tan(val:float):float` : Returns tangent of x - `PI : float` : PI number - `fmax(x:float,y:float):float` : Returns the larger of x and y(floating point). - `fmin(x:float,y:float):float` : Returns the smaller of x and y(floating point). - `max(x:int,y:int):int` : Returns the larger of x and y. - `min(x:int,y:int):int` : Returns the smaller of x and y. - `abs(x:float):float` : Calculates the absolute value of a number.","title":"write_file(path:string,text:string) : bool"}]}