{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Hascal is a general-purpose open source programming language that makes it easy to build simple,optimal, reliable, and efficient software. Installation Requirments : - python>=3.7 - gcc>=8(or any c++ compiler that supports c++17) - libcurl , libssl , libcrypt *Nix : git clone https://github.com/hascal/hascal.git cd hascal make deps make build Arch Users : pacman -S hascal-git Windows : git clone https://github.com/hascal/hascal.git cd hascal make deps-windows make windows Now your Hascal compiler is ready to use in src/dist folder, you can add it to $PATH . Hello World function main() : int { print(\"Hello World\") return 0 } Save this snippet into a file named hello.has . Now do: hascal hello.has Congratulations - you just wrote and executed your first Hascal program! As in many other languages (such as C++ and Rust), main is the entry point of your program and it should return int (an integer). print is one of the few built-in functions. It prints the value passed to it to standard output and can be used to print multiple values: function main():int { print(\"Hello World\", 42, true) return 0 } Configure the compiler You can use config.json file to configure your Hascal compiler. The following configuration options are available: - compiler : your c++ compiler name(e.g : g++ , clang++ ) - optimize : optimize level(0,1,2,3)(default : no optimize) - flags : custom flags(e.g: [\"-pthread\"] ) - no_check_g++ : if you don't use g++, set this to true - c++_version : your c++ standard(e.g: c++17 or c++20 ), note: c++ version must be greater than or equal to c++17 and compiler must support c++17 - g++_out : if you want to see g++ output, set this to true - c++_out : if you want to see generated c++ code, set this to true - only_compile if you want to only compile and not link program, set this to true example : { \"compiler\":\"g++\", \"optimize\":\"-O2\", \"flags\":[\"-pthread\"], \"no_check_g++\":1, \"c++_version\":\"c++17\", \"g++_out\":1, \"c++_out\":1 } Comments // This is a single line comment NOTE: Multiline comments are not supported yet(TODO). Variables A variable is a named storage for a value. Variables are declared using the var keyword : var foo : int = 1 Also you can declare a variable without type, in this case, the type will be inferred by the value assigned to it: var foo = 1 Non nullable and nullable Null safety is a feature that allows you to declare that a variable can be null or not null, and Hascal uses this feature to make sure that your code is safe. Hascal's variables and constants are non-nullable by default that means that they cannot be null( NULL ) and you can't assign NULL to them and you should assign a value to them when you declare them . var foo : int = 1 // non-nullable var foo_error : int // error : nullable variable must be assigned a value But you can make variables and constants nullable by adding ? to their type: var bar : int? = 1 // nullable so you can use NULL to set a variable to null : bar = NULL // ok Pointers Pointers are a way to access the memory address of a variable. You can declare a pointer using the ^ operator after the type: var foo : int^? NOTE: pointers are non-nullable by default, use ? to make it nullable: You use cast to assign a value to a pointer: foo = (int^)1 Finally, you can use the ^ operator to access the value stored in a pointer: var foo : int^ = (int^)1 print(^foo) // 1 NOTE: Currently only one level of pointers are supported. Hascal Types Primitive types bool // boolean value string // string literal int8 uint8 // 8-bit integer int16 uint16 // 16-bit integer int int32 uint32 // 32-bit integer int64 uint64 // 64-bit integer float // floating point double // double floating point Strings Strings are a sequence of characters. You can declare a string using the string keyword: var foo : string = \"Hello World\" You can use the + operator to concatenate strings: var foo : string = \"Hello\" + \" World\" And you can use the [] operator to access a character in a string: var foo : string = \"Hello\" print(foo[1]) // 'e' Note: type of accessed character is char Note: the first character in a string is at index 0. With len function you can get the length of a string: var foo : string = \"Hello\" print(len(foo)) // 5 Note: len function is a built-in function. Escape sequences You can use escape sequences to print special characters: var foo : string = \"Hello\\tWorld\" print(foo) // Hello World The following escape sequences are supported: - \\n : newline - \\t : tab - \\r : carriage return - \\\\ : backslash - \\' : single quote - \\\" : double quote - \\? : question mark - \\a : bell - \\b : backspace - \\f : form feed - \\v : vertical tab - \\0 : null character - \\x____ : hexadecimal character - \\u____ : unicode character - \\U____ : unicode character - \\_____ : arbitrary octal value Note: _____ means you should specify the id of the character you want to print. Numbers Numbers are either integers or floating point numbers. You can declare a number using the following types: int8 uint8 // 8-bit integer int16 uint16 // 16-bit integer int int32 uint32 // 32-bit integer int64 uint64 // 64-bit integer float // floating point double // double floating point So you can use the following operators to perform arithmetic operations: - + : addition - - : subtraction - * : multiplication - / : division See the following example: var a : int = 123 var b : float = 1.23 var c : double = 1.2313213215648789798 Type compatibility Type compatibility is very close to automatic or implicit type conversion. The type compatibility is being able to use two types together without modification and being able to subsititute one for the other without modification. Compatible types are: - int and float - int and double - float and double Note: strings are not compatible with characters. Arrays Arrays are collections of data elements of the same type. They can be represented by a list of elements surrounded by brackets. The elements can be accessed by appending an index (starting with 0) in brackets to the array variable: Arrays declare like following: var foo : [int] = [1,2,3] var bar : [string] = [\"Hello\", \"World\"] You can use the [] operator to access an element in an array: var foo : [int] = [1,2,3] print(foo[1]) // 2 And you can assign a value to an array element: var foo : [int] = [1,2,3] foo[1] = 4 print(foo[1]) // 4 With append built-in function you can append an element to an array: var foo : [int] = [1,2,3] foo.append(4) print(foo[3]) // 4 And you can get the length of an array with the len built-in function: var foo : [int] = [1,2,3] print(len(foo)) // 3 If You can use the if keyword to execute a block of code, if a condition is true: var foo : int = 1 if foo == 1 { print(\"foo is 1\") } Else You can use the else keyword to execute a block of code, if a condition is false: var foo : int = 1 if foo == 1 { print(\"foo is 1\") } else { print(\"foo is not 1\") } Else if You can use the else if statement to execute a block of code, if else if a condition is true: var foo : int = 1 if foo == 1 { print(\"foo is 1\") } else if foo == 2 { print(\"foo is 2\") } else { print(\"foo is not 1 or 2\") } and and or and not You can use the and keyword to execute a block of code, if all conditions are true: var foo : int = 1 var bar : int = 2 if foo == 1 and bar == 2 { print(\"foo is 1 and bar is 2\") } You can use the or keyword to execute a block of code, if at least one condition is true: var foo : int = 1 var bar : int = 2 if foo == 1 or bar == 2 { print(\"foo is 1 or bar is 2\") } You can use the not keyword to execute a block of code, if a condition is false: var foo : int = 1 if not foo == 1 { print(\"foo is not 1\") } You can see Hascal's conditional operators, here Loops You can use the while keyword to execute a block of code, if a condition is true: var foo : int = 1 while foo == 1 { print(\"foo is 1\") foo = 2 } The for keyword is used to execute a block of code for a number of times: for i in range(0, 10) { print(i) } Also you can use the for keyword for iterating over an array: var foo : [int] = [1,2,3] for i in foo { print(i) } Functions Functions are a way to group code that can be called to perform a specific task. You can declare a function using the function keyword: function foo() { print(\"Hello World\") } Also your function block should be outside of a function. Your function can have parameters and return a value. You can declare parameters and return type, like variable declarations: function add(x:int,y:int): int { return x + y } In the example above, x and y are parameters and thire type( int ) is your return type. Note: you can use ? to make a parameter nullable. Calling a function You can call a function by using the function name followed by parentheses: foo() If you want to pass some parameters to your function, you can use them in the parentheses: foo(1,2,3) Also you can assign the return value of a function to a variable: var foo : int = add(1,2) Function overloading You can overload functions by changing the number of parameters or the type of parameters : // overloading function function add(x:int,y:int,z:int): int { return x + y + z } function add2(x:int,y:int){ print(x + y) } function main(): int { print(add(1,2)) print(add(1,2,3)) } Passing function as argument You can pass a function as an argument to another function: function runner(func: Function[int, int]int) : int{ return func(1,2) } function add(a:int, b:int) : int { return a+b } function main():int { print(runner(add)) return 0 } In the example above, runner is a function that takes a function as an argument and returns the return value of the given function. Importing modules You can use other modules by importing them. You can import a module by using the use keyword: use os function main() : int { system(\"start http://www.google.com\") return 0 } Importing multiple modules You can import multiple modules by using the use keyword and separating the module names with a comma: use os, math, conv For importing a submodule of a module, you can use the . operator: use crypto.sha256 Creating a module For creating a module, you can create a file with the same name as the module and with the extension .has and put the module code inside it: add.has : function add(x:int, y:int) : int { return x + y } main.has : use add function main() : int { print(add(1,2)) return 0 } Creating foldered modules Module files can be placed in a folder, for creating a foldered module you should first create the folder and then create the _.has file inside it. The _.has file is the main file of the module and compiler will look for it. You can also import submodules in _.has file. Note: Any submodule that is not imported in _.has file will be ignored. Note: Any submodule can have other submodules. Structures Structures are a way to group data together. You can declare a structure using the struct keyword: struct Color { var r : int var g : int var b : int var name = \"Anything...\" // optional } Note: Declaring a structure member without a type will make it optional. After declaring a structure, you can create an instance of it: var red = Color(255,0,0) For accessing the fields of a structure, you should use the . operator: var red = Color(255,0,0) print(red.r) print(red.g) print(red.b) print(red.name) Structures as return values You can return a structure from a function: function foo() : Color { return Color(1,2,3) } Structures as arguments You can pass a structure as an argument to a function: function foo(c:Color) { print(c.r) print(c.g) print(c.b) print(c.name) } Structure inheritance You can inherit a structure from another structure with : operator after the structure name: struct RGB : Color { } And you can access the fields of the inherited structure: var foo : RGB = RGB(1,2,3) print(foo.r,foo.g,foo.b) var bar = RGB(255,0,0,\"AColor\") Memory management Memory management is a way to manage the memory of your program. Hascall use manual memory management because this manual memory management is used in most performance-critical applications like games,OSes, embedded systems, etc. Hascal uses new and delete keywords to manage memory, manually. Allocation For allocating memory, you should use the new keyword. Note that type of the allocated memory should be pointer or reference type : var foo : int^ = new int(1) For easily declaring and allocating memory, use var <name> = new <type>(<args...>) statement, like this: var foo = new int(1) Reallocation For reallocating memory and assigning the new value to the pointer, use <pointer> = new <type>(<args...>) statement, like this: var foo : int^ = new int(1) // allocate memory foo = new int(2) // reallocate memory and assign new value Deallocation For deallocating memory, you should use the delete keyword and pass the pointer to the memory that you want to deallocate: delete foo Accessing memory Like pointers, you can access the allocated memory value with the ^ operator: var foo : int^ = new int(1) print(^foo) Critical notes Don't forget to use the delete keyword at end of scope and before the end of the program. . In future, we will add a feature to show warnings when you forget to use the delete keyword. You can't deallocate memory that you haven't allocated it without new keyword. You can allocate, not allocated pointers : var foo : int^? foo = new int(1)","title":"Language Documentation"},{"location":"#introduction","text":"Hascal is a general-purpose open source programming language that makes it easy to build simple,optimal, reliable, and efficient software.","title":"Introduction"},{"location":"#installation","text":"Requirments : - python>=3.7 - gcc>=8(or any c++ compiler that supports c++17) - libcurl , libssl , libcrypt *Nix : git clone https://github.com/hascal/hascal.git cd hascal make deps make build Arch Users : pacman -S hascal-git Windows : git clone https://github.com/hascal/hascal.git cd hascal make deps-windows make windows Now your Hascal compiler is ready to use in src/dist folder, you can add it to $PATH .","title":"Installation"},{"location":"#hello-world","text":"function main() : int { print(\"Hello World\") return 0 } Save this snippet into a file named hello.has . Now do: hascal hello.has Congratulations - you just wrote and executed your first Hascal program! As in many other languages (such as C++ and Rust), main is the entry point of your program and it should return int (an integer). print is one of the few built-in functions. It prints the value passed to it to standard output and can be used to print multiple values: function main():int { print(\"Hello World\", 42, true) return 0 }","title":"Hello World"},{"location":"#configure-the-compiler","text":"You can use config.json file to configure your Hascal compiler. The following configuration options are available: - compiler : your c++ compiler name(e.g : g++ , clang++ ) - optimize : optimize level(0,1,2,3)(default : no optimize) - flags : custom flags(e.g: [\"-pthread\"] ) - no_check_g++ : if you don't use g++, set this to true - c++_version : your c++ standard(e.g: c++17 or c++20 ), note: c++ version must be greater than or equal to c++17 and compiler must support c++17 - g++_out : if you want to see g++ output, set this to true - c++_out : if you want to see generated c++ code, set this to true - only_compile if you want to only compile and not link program, set this to true example : { \"compiler\":\"g++\", \"optimize\":\"-O2\", \"flags\":[\"-pthread\"], \"no_check_g++\":1, \"c++_version\":\"c++17\", \"g++_out\":1, \"c++_out\":1 }","title":"Configure the compiler"},{"location":"#comments","text":"// This is a single line comment NOTE: Multiline comments are not supported yet(TODO).","title":"Comments"},{"location":"#variables","text":"A variable is a named storage for a value. Variables are declared using the var keyword : var foo : int = 1 Also you can declare a variable without type, in this case, the type will be inferred by the value assigned to it: var foo = 1","title":"Variables"},{"location":"#non-nullable-and-nullable","text":"Null safety is a feature that allows you to declare that a variable can be null or not null, and Hascal uses this feature to make sure that your code is safe. Hascal's variables and constants are non-nullable by default that means that they cannot be null( NULL ) and you can't assign NULL to them and you should assign a value to them when you declare them . var foo : int = 1 // non-nullable var foo_error : int // error : nullable variable must be assigned a value But you can make variables and constants nullable by adding ? to their type: var bar : int? = 1 // nullable so you can use NULL to set a variable to null : bar = NULL // ok","title":"Non nullable and nullable"},{"location":"#pointers","text":"Pointers are a way to access the memory address of a variable. You can declare a pointer using the ^ operator after the type: var foo : int^? NOTE: pointers are non-nullable by default, use ? to make it nullable: You use cast to assign a value to a pointer: foo = (int^)1 Finally, you can use the ^ operator to access the value stored in a pointer: var foo : int^ = (int^)1 print(^foo) // 1 NOTE: Currently only one level of pointers are supported.","title":"Pointers"},{"location":"#hascal-types","text":"","title":"Hascal Types"},{"location":"#primitive-types","text":"bool // boolean value string // string literal int8 uint8 // 8-bit integer int16 uint16 // 16-bit integer int int32 uint32 // 32-bit integer int64 uint64 // 64-bit integer float // floating point double // double floating point","title":"Primitive types"},{"location":"#strings","text":"Strings are a sequence of characters. You can declare a string using the string keyword: var foo : string = \"Hello World\" You can use the + operator to concatenate strings: var foo : string = \"Hello\" + \" World\" And you can use the [] operator to access a character in a string: var foo : string = \"Hello\" print(foo[1]) // 'e' Note: type of accessed character is char Note: the first character in a string is at index 0. With len function you can get the length of a string: var foo : string = \"Hello\" print(len(foo)) // 5 Note: len function is a built-in function.","title":"Strings"},{"location":"#escape-sequences","text":"You can use escape sequences to print special characters: var foo : string = \"Hello\\tWorld\" print(foo) // Hello World The following escape sequences are supported: - \\n : newline - \\t : tab - \\r : carriage return - \\\\ : backslash - \\' : single quote - \\\" : double quote - \\? : question mark - \\a : bell - \\b : backspace - \\f : form feed - \\v : vertical tab - \\0 : null character - \\x____ : hexadecimal character - \\u____ : unicode character - \\U____ : unicode character - \\_____ : arbitrary octal value Note: _____ means you should specify the id of the character you want to print.","title":"Escape sequences"},{"location":"#numbers","text":"Numbers are either integers or floating point numbers. You can declare a number using the following types: int8 uint8 // 8-bit integer int16 uint16 // 16-bit integer int int32 uint32 // 32-bit integer int64 uint64 // 64-bit integer float // floating point double // double floating point So you can use the following operators to perform arithmetic operations: - + : addition - - : subtraction - * : multiplication - / : division See the following example: var a : int = 123 var b : float = 1.23 var c : double = 1.2313213215648789798","title":"Numbers"},{"location":"#type-compatibility","text":"Type compatibility is very close to automatic or implicit type conversion. The type compatibility is being able to use two types together without modification and being able to subsititute one for the other without modification. Compatible types are: - int and float - int and double - float and double Note: strings are not compatible with characters.","title":"Type compatibility"},{"location":"#arrays","text":"Arrays are collections of data elements of the same type. They can be represented by a list of elements surrounded by brackets. The elements can be accessed by appending an index (starting with 0) in brackets to the array variable: Arrays declare like following: var foo : [int] = [1,2,3] var bar : [string] = [\"Hello\", \"World\"] You can use the [] operator to access an element in an array: var foo : [int] = [1,2,3] print(foo[1]) // 2 And you can assign a value to an array element: var foo : [int] = [1,2,3] foo[1] = 4 print(foo[1]) // 4 With append built-in function you can append an element to an array: var foo : [int] = [1,2,3] foo.append(4) print(foo[3]) // 4 And you can get the length of an array with the len built-in function: var foo : [int] = [1,2,3] print(len(foo)) // 3","title":"Arrays"},{"location":"#if","text":"You can use the if keyword to execute a block of code, if a condition is true: var foo : int = 1 if foo == 1 { print(\"foo is 1\") }","title":"If"},{"location":"#else","text":"You can use the else keyword to execute a block of code, if a condition is false: var foo : int = 1 if foo == 1 { print(\"foo is 1\") } else { print(\"foo is not 1\") }","title":"Else"},{"location":"#else-if","text":"You can use the else if statement to execute a block of code, if else if a condition is true: var foo : int = 1 if foo == 1 { print(\"foo is 1\") } else if foo == 2 { print(\"foo is 2\") } else { print(\"foo is not 1 or 2\") }","title":"Else if"},{"location":"#and-and-or-and-not","text":"You can use the and keyword to execute a block of code, if all conditions are true: var foo : int = 1 var bar : int = 2 if foo == 1 and bar == 2 { print(\"foo is 1 and bar is 2\") } You can use the or keyword to execute a block of code, if at least one condition is true: var foo : int = 1 var bar : int = 2 if foo == 1 or bar == 2 { print(\"foo is 1 or bar is 2\") } You can use the not keyword to execute a block of code, if a condition is false: var foo : int = 1 if not foo == 1 { print(\"foo is not 1\") } You can see Hascal's conditional operators, here","title":"and and or and not"},{"location":"#loops","text":"You can use the while keyword to execute a block of code, if a condition is true: var foo : int = 1 while foo == 1 { print(\"foo is 1\") foo = 2 } The for keyword is used to execute a block of code for a number of times: for i in range(0, 10) { print(i) } Also you can use the for keyword for iterating over an array: var foo : [int] = [1,2,3] for i in foo { print(i) }","title":"Loops"},{"location":"#functions","text":"Functions are a way to group code that can be called to perform a specific task. You can declare a function using the function keyword: function foo() { print(\"Hello World\") } Also your function block should be outside of a function. Your function can have parameters and return a value. You can declare parameters and return type, like variable declarations: function add(x:int,y:int): int { return x + y } In the example above, x and y are parameters and thire type( int ) is your return type. Note: you can use ? to make a parameter nullable.","title":"Functions"},{"location":"#calling-a-function","text":"You can call a function by using the function name followed by parentheses: foo() If you want to pass some parameters to your function, you can use them in the parentheses: foo(1,2,3) Also you can assign the return value of a function to a variable: var foo : int = add(1,2)","title":"Calling a function"},{"location":"#function-overloading","text":"You can overload functions by changing the number of parameters or the type of parameters : // overloading function function add(x:int,y:int,z:int): int { return x + y + z } function add2(x:int,y:int){ print(x + y) } function main(): int { print(add(1,2)) print(add(1,2,3)) }","title":"Function overloading"},{"location":"#passing-function-as-argument","text":"You can pass a function as an argument to another function: function runner(func: Function[int, int]int) : int{ return func(1,2) } function add(a:int, b:int) : int { return a+b } function main():int { print(runner(add)) return 0 } In the example above, runner is a function that takes a function as an argument and returns the return value of the given function.","title":"Passing function as argument"},{"location":"#importing-modules","text":"You can use other modules by importing them. You can import a module by using the use keyword: use os function main() : int { system(\"start http://www.google.com\") return 0 }","title":"Importing modules"},{"location":"#importing-multiple-modules","text":"You can import multiple modules by using the use keyword and separating the module names with a comma: use os, math, conv For importing a submodule of a module, you can use the . operator: use crypto.sha256","title":"Importing multiple modules"},{"location":"#creating-a-module","text":"For creating a module, you can create a file with the same name as the module and with the extension .has and put the module code inside it: add.has : function add(x:int, y:int) : int { return x + y } main.has : use add function main() : int { print(add(1,2)) return 0 }","title":"Creating a module"},{"location":"#creating-foldered-modules","text":"Module files can be placed in a folder, for creating a foldered module you should first create the folder and then create the _.has file inside it. The _.has file is the main file of the module and compiler will look for it. You can also import submodules in _.has file. Note: Any submodule that is not imported in _.has file will be ignored. Note: Any submodule can have other submodules.","title":"Creating foldered modules"},{"location":"#structures","text":"Structures are a way to group data together. You can declare a structure using the struct keyword: struct Color { var r : int var g : int var b : int var name = \"Anything...\" // optional } Note: Declaring a structure member without a type will make it optional. After declaring a structure, you can create an instance of it: var red = Color(255,0,0) For accessing the fields of a structure, you should use the . operator: var red = Color(255,0,0) print(red.r) print(red.g) print(red.b) print(red.name)","title":"Structures"},{"location":"#structures-as-return-values","text":"You can return a structure from a function: function foo() : Color { return Color(1,2,3) }","title":"Structures as return values"},{"location":"#structures-as-arguments","text":"You can pass a structure as an argument to a function: function foo(c:Color) { print(c.r) print(c.g) print(c.b) print(c.name) }","title":"Structures as arguments"},{"location":"#structure-inheritance","text":"You can inherit a structure from another structure with : operator after the structure name: struct RGB : Color { } And you can access the fields of the inherited structure: var foo : RGB = RGB(1,2,3) print(foo.r,foo.g,foo.b) var bar = RGB(255,0,0,\"AColor\")","title":"Structure inheritance"},{"location":"#memory-management","text":"Memory management is a way to manage the memory of your program. Hascall use manual memory management because this manual memory management is used in most performance-critical applications like games,OSes, embedded systems, etc. Hascal uses new and delete keywords to manage memory, manually.","title":"Memory management"},{"location":"#allocation","text":"For allocating memory, you should use the new keyword. Note that type of the allocated memory should be pointer or reference type : var foo : int^ = new int(1) For easily declaring and allocating memory, use var <name> = new <type>(<args...>) statement, like this: var foo = new int(1)","title":"Allocation"},{"location":"#reallocation","text":"For reallocating memory and assigning the new value to the pointer, use <pointer> = new <type>(<args...>) statement, like this: var foo : int^ = new int(1) // allocate memory foo = new int(2) // reallocate memory and assign new value","title":"Reallocation"},{"location":"#deallocation","text":"For deallocating memory, you should use the delete keyword and pass the pointer to the memory that you want to deallocate: delete foo","title":"Deallocation"},{"location":"#accessing-memory","text":"Like pointers, you can access the allocated memory value with the ^ operator: var foo : int^ = new int(1) print(^foo)","title":"Accessing memory"},{"location":"#critical-notes","text":"Don't forget to use the delete keyword at end of scope and before the end of the program. . In future, we will add a feature to show warnings when you forget to use the delete keyword. You can't deallocate memory that you haven't allocated it without new keyword. You can allocate, not allocated pointers : var foo : int^? foo = new int(1)","title":"Critical notes"},{"location":"CHANGELOG/","text":"Hascal's Changelog v1.3.9 v1.3.9-beta #### New features - passing functions as arguments function f(x: int): int { return x + 1 } function g(func:Function[int]int): int { return func(1) } - add static variables, [See this example](https://github.com/hascal/hascal/blob/main/tests/static.has) - add `only_compile` config option #### Changes - upgrade importing system #### Bug fixes #### Removed v1.3.9-alpha.1 #### Changes - add `download`,`upload`,`post` functions to `http` library - `https` support for `http` library - add `windows` library(that includes `windows.h`) - add `browser` library to open urls in default browser(now only supports windows) #### Bug fixes - fix linker flag import bug in `cuse` statement v1.3.8 #### New features - non-nullable and nullable variables #### Changes - change pointer unary from `*` to `^` - improve importing system #### Bug fixes - fix repetitious imports bug - fix #29 bug(by [@mmdbalkhi](https://github.com/mmdbalkhi)) #### Removed - remove `token` library v1.3.7 #### New features - manual memory management with `new` and `delete` keyword - functional programming paradigm - speed up compilation time - add `typeof` function - now can print arrays and structures - function decorators - `static` and `extern` decorator - multiple library import - improve importing system - improve stdlib architecture #### Bug fixes - fix scoping bug - fix `conv` library bug - fix conditions bug #### Removed - `export` library removed - `local use` statement removed v1.3.6 #### New features - more data types : `int8`,`uint8`,`int16`,`uint16`,`int32`,`uint32`,`int64`,`uint64`,`double` - type compatibility - multi line string - pointers and references var x : *int = 20 var y : int = 10 x = &y var z = *x // type : int // Pointers fix incomplete types on struct defination struct bar { var self : *bar } - add `sizeof` function #### Bug fixes - fix lexer bugs - check if function returns a value at end of string else show error - `main` function should returns int - fix `termcolor` library bugs - fix enum bugs #### Standart library - add `sdl2` wrapper - add `export` library for exporting to C(see : [haspy](https://github.com/bistcuite/haspy)) - add `crypto.sha256` for sha256 hashing #### Removed - `libcinfo` library removed v1.3.5 #### Standard library ##### Updated `os` : - add `compiler_name` function to get the name of the compiler - add `arch` function to get the architecture of the system - add `is_x86` function to check if the architecture is x86 - add `is_x64` function to check if the architecture is x64 - add `getenv` function to get an environment variable ##### Added - add `libcinfo` library to get information about the libc - add `termcolor` library to colorize the output ![assets/termcolor.png](assets/termcolor.png) #### Bug fixes - Fix incomplete type defination bug v1.3.4 #### New features - compiler option : now can generate c++ code from hascal code with `c++_code : 1` in `config.json` file - use `cuse` keyword to include c++ files. #### Bug fixes - Fix semantic analyser bugs - Fix standard library bug v1.3.3 #### New features - struct inheritance - can use `cuse` statement on struct declaration #### Bug fixes - Fix variable scope bug - Fix variable declaration bug - Fix semantic analyser bug v1.3.2 #### New features - `for in` statement - library manager - flag option - `cuse` statement #### Bug fixes - Fix semantic analyser bugs - Fix nested struct bug #### Removed - `for to` and `for downto` statement removed v1.3.1 #### New features - Basic Semantic Anaslyser #### Removed - remove semicolon from syntax","title":"Hascal's Changelog"},{"location":"CHANGELOG/#hascals-changelog","text":"v1.3.9 v1.3.9-beta #### New features - passing functions as arguments function f(x: int): int { return x + 1 } function g(func:Function[int]int): int { return func(1) } - add static variables, [See this example](https://github.com/hascal/hascal/blob/main/tests/static.has) - add `only_compile` config option #### Changes - upgrade importing system #### Bug fixes #### Removed v1.3.9-alpha.1 #### Changes - add `download`,`upload`,`post` functions to `http` library - `https` support for `http` library - add `windows` library(that includes `windows.h`) - add `browser` library to open urls in default browser(now only supports windows) #### Bug fixes - fix linker flag import bug in `cuse` statement v1.3.8 #### New features - non-nullable and nullable variables #### Changes - change pointer unary from `*` to `^` - improve importing system #### Bug fixes - fix repetitious imports bug - fix #29 bug(by [@mmdbalkhi](https://github.com/mmdbalkhi)) #### Removed - remove `token` library v1.3.7 #### New features - manual memory management with `new` and `delete` keyword - functional programming paradigm - speed up compilation time - add `typeof` function - now can print arrays and structures - function decorators - `static` and `extern` decorator - multiple library import - improve importing system - improve stdlib architecture #### Bug fixes - fix scoping bug - fix `conv` library bug - fix conditions bug #### Removed - `export` library removed - `local use` statement removed v1.3.6 #### New features - more data types : `int8`,`uint8`,`int16`,`uint16`,`int32`,`uint32`,`int64`,`uint64`,`double` - type compatibility - multi line string - pointers and references var x : *int = 20 var y : int = 10 x = &y var z = *x // type : int // Pointers fix incomplete types on struct defination struct bar { var self : *bar } - add `sizeof` function #### Bug fixes - fix lexer bugs - check if function returns a value at end of string else show error - `main` function should returns int - fix `termcolor` library bugs - fix enum bugs #### Standart library - add `sdl2` wrapper - add `export` library for exporting to C(see : [haspy](https://github.com/bistcuite/haspy)) - add `crypto.sha256` for sha256 hashing #### Removed - `libcinfo` library removed v1.3.5 #### Standard library ##### Updated `os` : - add `compiler_name` function to get the name of the compiler - add `arch` function to get the architecture of the system - add `is_x86` function to check if the architecture is x86 - add `is_x64` function to check if the architecture is x64 - add `getenv` function to get an environment variable ##### Added - add `libcinfo` library to get information about the libc - add `termcolor` library to colorize the output ![assets/termcolor.png](assets/termcolor.png) #### Bug fixes - Fix incomplete type defination bug v1.3.4 #### New features - compiler option : now can generate c++ code from hascal code with `c++_code : 1` in `config.json` file - use `cuse` keyword to include c++ files. #### Bug fixes - Fix semantic analyser bugs - Fix standard library bug v1.3.3 #### New features - struct inheritance - can use `cuse` statement on struct declaration #### Bug fixes - Fix variable scope bug - Fix variable declaration bug - Fix semantic analyser bug v1.3.2 #### New features - `for in` statement - library manager - flag option - `cuse` statement #### Bug fixes - Fix semantic analyser bugs - Fix nested struct bug #### Removed - `for to` and `for downto` statement removed v1.3.1 #### New features - Basic Semantic Anaslyser #### Removed - remove semicolon from syntax","title":"Hascal's Changelog"},{"location":"ROADMAP/","text":"Hascal's Roadmap v1.3.x ### Base - redesign logo - js backend(`hascal2js`) - static variables - use `mdbook` instead of `mkdocs` for documentation generation ### Language - lambdas : var mythread = thread(@(1000,true){ print(\"hi\") }) ### Standard Library - `thread` library ### Library Manager - unistall library option","title":"Hascal's Roadmap"},{"location":"ROADMAP/#hascals-roadmap","text":"v1.3.x ### Base - redesign logo - js backend(`hascal2js`) - static variables - use `mdbook` instead of `mkdocs` for documentation generation ### Language - lambdas : var mythread = thread(@(1000,true){ print(\"hi\") }) ### Standard Library - `thread` library ### Library Manager - unistall library option","title":"Hascal's Roadmap"},{"location":"cond_op/","text":"Conditional Operators Operator Description Example == Returns true if the operands are equal. var1 == var2 != Returns true if the operands are not equal. var1 != var2 > Returns true if the left operand is greater than the right operand. var1 > var2 >= Returns true if the left operand is greater than or equal to the right operand. var1 >= var2 < Returns true if the left operand is less than the right operand. var1 < var2 <= Returns true if the left operand is less than or equal to the right operand. var1 <= var2 and Returns true if the left operand and right operand are true var1 == 1 and var2 == 2 or Returns true if the left operand or right operand are true var1 == 1 or var2 == 2 not Returns true if the operand are false or if the operand is true returns false not true","title":"Conditional Operators"},{"location":"cond_op/#conditional-operators","text":"Operator Description Example == Returns true if the operands are equal. var1 == var2 != Returns true if the operands are not equal. var1 != var2 > Returns true if the left operand is greater than the right operand. var1 > var2 >= Returns true if the left operand is greater than or equal to the right operand. var1 >= var2 < Returns true if the left operand is less than the right operand. var1 < var2 <= Returns true if the left operand is less than or equal to the right operand. var1 <= var2 and Returns true if the left operand and right operand are true var1 == 1 and var2 == 2 or Returns true if the left operand or right operand are true var1 == 1 or var2 == 2 not Returns true if the operand are false or if the operand is true returns false not true","title":"Conditional Operators"},{"location":"ide/","text":"IDE Integration Vscode Extension Todo Vim extension Emacs extension Nano extension Atom plugin Notepad++ Extension Intellij Idea plugin","title":"IDE Integration"},{"location":"ide/#ide-integration","text":"Vscode Extension","title":"IDE Integration"},{"location":"ide/#todo","text":"Vim extension Emacs extension Nano extension Atom plugin Notepad++ Extension Intellij Idea plugin","title":"Todo"},{"location":"interfacing/","text":"Interfacing with C++ Hascal is based on C++, so you can use C++ functions and classes in your program. Inline C++ Code You can use inline c++ code in Hascal with cuse keyword : cuse '#include <cstdio>' cuse 'int main(){printf(\"%d\",1);return 0;}' // output : 1 Or you can use multiline c++ code, like following: cuse \"\"\" #include <cstdio> int main(){ printf(\"%d\",1); return 0; } \"\"\" Externing functions For using C++ functions in your program, you should at first declare them with following syntax: function <name>(<args...>) : <return type> Include C++ headers Also Hascal can include C++ headers in your program. We need two files, one for including macros and one for main part of the header. You should put including macros in your_cpp_lib.hpp and main part in your_cpp_lib.cc . The specified files should exist in the same folder. See the example below: add.cc : void cpp_print(int x){ printf(\"%d\",x); } add.hpp : #include <cstdio> main.has : cuse add function cpp_print(x:int) function main() : int { cpp_print(12) return 0 }","title":"Interfacing to C\\C++"},{"location":"interfacing/#interfacing-with-c","text":"Hascal is based on C++, so you can use C++ functions and classes in your program.","title":"Interfacing with C++"},{"location":"interfacing/#inline-c-code","text":"You can use inline c++ code in Hascal with cuse keyword : cuse '#include <cstdio>' cuse 'int main(){printf(\"%d\",1);return 0;}' // output : 1 Or you can use multiline c++ code, like following: cuse \"\"\" #include <cstdio> int main(){ printf(\"%d\",1); return 0; } \"\"\"","title":"Inline C++ Code"},{"location":"interfacing/#externing-functions","text":"For using C++ functions in your program, you should at first declare them with following syntax: function <name>(<args...>) : <return type>","title":"Externing functions"},{"location":"interfacing/#include-c-headers","text":"Also Hascal can include C++ headers in your program. We need two files, one for including macros and one for main part of the header. You should put including macros in your_cpp_lib.hpp and main part in your_cpp_lib.cc . The specified files should exist in the same folder. See the example below: add.cc : void cpp_print(int x){ printf(\"%d\",x); } add.hpp : #include <cstdio> main.has : cuse add function cpp_print(x:int) function main() : int { cpp_print(12) return 0 }","title":"Include C++ headers"},{"location":"libmanager/","text":"Hascal Library Manager(HLM) HLM is default and builtin Hascal's library manager. Install a library $ hascal install <library name> example : $ hascal install log Uninstall a library $ hascal uninstall <library name> example : $ hascal uninstall log Publish your libraries Todo","title":"Library Mangaer"},{"location":"libmanager/#hascal-library-managerhlm","text":"HLM is default and builtin Hascal's library manager.","title":"Hascal Library Manager(HLM)"},{"location":"libmanager/#install-a-library","text":"$ hascal install <library name> example : $ hascal install log","title":"Install a library"},{"location":"libmanager/#uninstall-a-library","text":"$ hascal uninstall <library name> example : $ hascal uninstall log","title":"Uninstall a library"},{"location":"libmanager/#publish-your-libraries","text":"Todo","title":"Publish your libraries"},{"location":"stdlib/","text":"Hascal Standard Library Built-in Functions file os time math strings http random libcinfo termcolor crypto.sha256 Built-in functions print(...) : Standard Hascal's print function ReadStr() : Standard Hascal's read string function ReadInt() : Standard Hascal's read integer function ReadFloat() : Standard Hascal's read float function ReadBool() : Standard Hascal's read boolean function ReadChar() : Standard Hascal's read character function to_int(val:T) : Standard Hascal's convert to integer function to_float(val:T) : Standard Hascal's convert to float function to_bool(val:T) : Standard Hascal's convert to boolean function to_char(val:T) : Standard Hascal's convert to character function to_string(val:T) : Standard Hascal's convert to string function exit(exit_code:int) : Standard Hascal's exit function sizeof(T) : Standard Hascal's sizeof function typeof(T) : Standard Hascal's typeof function file read_file(file_name:string) : string : Read a file and return its content write_file(file_name:string,content:string) : Write a file os os_name() : string : Return OS name system() : Execute a command compiler_name() : string : Return compiler name arch() : string : Return architecture is_x86() : bool : Return true if architecture is x86 is_x64() : bool : Return true if architecture is x64 getenv(name:string) : string : Return environment variable time Work with time/date get_year():int : Get current year get_month():int : Get current month get_day():int : Get current day get_hour():int : Get current hour get_minute():int : Get current minute get_second():int : Get current second math Math Functions sin(val:float):float : Returns sine of x cos(val:float):float : Returns cosine of x tan(val:float):float : Returns tangent of x PI : float : PI number fmax(x:float,y:float):float : Returns the larger of x and y(floating point). fmin(x:float,y:float):float : Returns the smaller of x and y(floating point). max(x:int,y:int):int : Returns the larger of x and y. min(x:int,y:int):int : Returns the smaller of x and y. abs(x:float):float : Calculates the absolute value of a number. strings Work with strings is_alpha(c:char): bool : check if char is alphabetic is_alphanum(c:char): bool : check if char is alphanumeric is_number(c:char): bool : check if char is number is_space(c:char): bool : check if char is space is_lower(c:char): bool : check if char is lowercase is_upper(c:char): bool : check if char is uppercase http HTTP client-server library get(url:string) : string : get content from given url post(url:string,post_data:string):string : post content to given url download(url:string,path:string):bool : download and save a url to storage upload(url:string,path:string):bool : upload a file to a url See Example for http library random Random number generator random_int(max:int):int : Returns a random integer between 0 and max termcolor Colorize text cprint(txt:string,color:string) : print text in color reset_color() : reset color Colors : red green yellow blue magenta cyan white black windows browser NOTE : Only supports windwos! open_newtab(url:string) : open urls in new tab with default browser crypto.sha256 SHA256 hash generate_sha256(data:string) : string : return sha256 hash of string","title":"Standard Library"},{"location":"stdlib/#hascal-standard-library","text":"Built-in Functions file os time math strings http random libcinfo termcolor crypto.sha256","title":"Hascal Standard Library"},{"location":"stdlib/#built-in-functions","text":"print(...) : Standard Hascal's print function ReadStr() : Standard Hascal's read string function ReadInt() : Standard Hascal's read integer function ReadFloat() : Standard Hascal's read float function ReadBool() : Standard Hascal's read boolean function ReadChar() : Standard Hascal's read character function to_int(val:T) : Standard Hascal's convert to integer function to_float(val:T) : Standard Hascal's convert to float function to_bool(val:T) : Standard Hascal's convert to boolean function to_char(val:T) : Standard Hascal's convert to character function to_string(val:T) : Standard Hascal's convert to string function exit(exit_code:int) : Standard Hascal's exit function sizeof(T) : Standard Hascal's sizeof function typeof(T) : Standard Hascal's typeof function","title":"Built-in functions"},{"location":"stdlib/#file","text":"read_file(file_name:string) : string : Read a file and return its content write_file(file_name:string,content:string) : Write a file","title":"file"},{"location":"stdlib/#os","text":"os_name() : string : Return OS name system() : Execute a command compiler_name() : string : Return compiler name arch() : string : Return architecture is_x86() : bool : Return true if architecture is x86 is_x64() : bool : Return true if architecture is x64 getenv(name:string) : string : Return environment variable","title":"os"},{"location":"stdlib/#time","text":"Work with time/date get_year():int : Get current year get_month():int : Get current month get_day():int : Get current day get_hour():int : Get current hour get_minute():int : Get current minute get_second():int : Get current second","title":"time"},{"location":"stdlib/#math","text":"Math Functions sin(val:float):float : Returns sine of x cos(val:float):float : Returns cosine of x tan(val:float):float : Returns tangent of x PI : float : PI number fmax(x:float,y:float):float : Returns the larger of x and y(floating point). fmin(x:float,y:float):float : Returns the smaller of x and y(floating point). max(x:int,y:int):int : Returns the larger of x and y. min(x:int,y:int):int : Returns the smaller of x and y. abs(x:float):float : Calculates the absolute value of a number.","title":"math"},{"location":"stdlib/#strings","text":"Work with strings is_alpha(c:char): bool : check if char is alphabetic is_alphanum(c:char): bool : check if char is alphanumeric is_number(c:char): bool : check if char is number is_space(c:char): bool : check if char is space is_lower(c:char): bool : check if char is lowercase is_upper(c:char): bool : check if char is uppercase","title":"strings"},{"location":"stdlib/#http","text":"HTTP client-server library get(url:string) : string : get content from given url post(url:string,post_data:string):string : post content to given url download(url:string,path:string):bool : download and save a url to storage upload(url:string,path:string):bool : upload a file to a url See Example for http library","title":"http"},{"location":"stdlib/#random","text":"Random number generator random_int(max:int):int : Returns a random integer between 0 and max","title":"random"},{"location":"stdlib/#termcolor","text":"Colorize text cprint(txt:string,color:string) : print text in color reset_color() : reset color Colors : red green yellow blue magenta cyan white black","title":"termcolor"},{"location":"stdlib/#windows","text":"","title":"windows"},{"location":"stdlib/#browser","text":"NOTE : Only supports windwos! open_newtab(url:string) : open urls in new tab with default browser","title":"browser"},{"location":"stdlib/#cryptosha256","text":"SHA256 hash generate_sha256(data:string) : string : return sha256 hash of string","title":"crypto.sha256"}]}