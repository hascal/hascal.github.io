{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Hascal is a general-purpose open source programming language that makes it easy to build simple,optimal, reliable, and efficient software. Installation python setup.py install Now your Hascal compiler is ready to use in src/dist folder!!! NOTE: But you can add Hascal to $PATH for easily use. Hello World function main() : int { print(\"Hello World\") return 0 } Save this snippet into a file named hello.has . Now do: hascal hello.has . Congratulations - you just wrote and executed your first Hascal program! As in many other languages (such as C++ and Rust), main is the entry point of your program. print is one of the few built-in functions. It prints the value passed to it to standard output. config.json : You can use config.json to configure your Hascal compiler. compiler : your c++ compiler name(e.g : g++ , clang++ ) optimize : optimize level(0,1,2,3)(default : no optimize) flags : flags list for your compiler(e.g: [\"-pthread\"] ) no_check_g++ : if you don't use g++, set this to 1 c++_version : your c++ standard(e.g: c++17 or c++20 ).note: c++ version must be greater than or equal to c++17 g++_out : if you want to see g++ output, set this to 1 c++_out : if you want to see generated c++ code, set this to 1 example : { \"compiler\":\"g++\", \"optimize\":\"-O2\", \"flags\":[\"-pthread\"], \"no_check_g++\":1, \"c++_version\":\"c++17\", \"g++_out\":1, \"c++_out\":1 } Comments // This is a single line comment Variables var foo : int var foobar : int = 1 var bar = 1 function main() : int { print(foo,foobar) return 0 } Non nullable and nullable Hascal's variables and constants are non-nullable by default(i.e. they can't be NULL ), but you can make them nullable by using ? at the end of the type : var foo : int = 1 // non-nullable var bar : int? = 1 // nullable so you can use NULL to set a variable to NULL : foo = NULL // error bar = NULL // ok Also, you can make pointers to nullable variables : var foo : int^ = NULL // error var bar : int^? = NULL // ok Pointers var foo : int^ var foobar : int = ^foo var bar : int = 2 foo = &bar NOTE: pointers are non-nullable by default, use ? to make it nullable: var foo : int? foo = NULL Functions function add(x:int,y:int): int { return x + y } // overloading function function add(x:int,y:int,z:int): int { return x + y + z } function add2(x:int,y:int){ print(x + y) } function main(): int { print(add(1,2)) print(add(1,2,3)) } Again, the type comes after : and : comes after the argument's name. Hascal Types Primitive types bool // boolean value string // string literal int8 uint8 // 8-bit integer int16 uint16 // 16-bit integer int int32 uint32 // 32-bit integer int64 uint64 // 64-bit integer float // floating point double // double floating point Strings function main() : int { var text = \"Hello World\" print(text[0]) // output : H var text2 = \"Hello\\tWorld\" print(text2) // output : Hello World return 0 } String operators function main() : int { var text = \"Hello \" print(text + \"World\") // output : Hello World return 0 } All operators in Hascal must have values of the same type on both sides. You cannot concatenate an integer to a string: function main() : int { var text = \"age = \" var age = 23 print(text + age) // error : Mismatched type 'string' and 'int' :2 return 0 } We have to either convert age to a string: function main() : int { var text = \"age = \" var age = 23 print(text + to_string(age)) // error : Mismatched type 'string' and 'int' :3 return 0 } Numbers function main() : int { var a : int = 123 // or : var a = 123 var b : float = 1.23 // or : var b = 1.24 var c : double = b // type compatibility var cc : int8 = c // type conversion return 0 } This will assign the value of 123 to a and 1.23 to b and 1.23 to c and 1 to cc . Arrays Basic Array Concepts Arrays are collections of data elements of the same type. They can be represented by a list of elements surrounded by brackets. The elements can be accessed by appending an index (starting with 0) in brackets to the array variable: function main() : int { var a = [1,2,3] // int array with length 3 var b = [1.0,2.0,3.0] // float array with length 3 print(a[0]) a[0] = 4 print(a[0]) return 0 } Array Initialization The basic initialization syntax is as described above. The type of an array is determined by the first element: [1, 2, 3] is an array of ints ( [int] ). [\"a\", \"b\"] is an array of strings ( [string] ). Array Size You can get length of array's elements with len function : function main() : int { var a = [1,2,3] print(len(a)) // output : 3 } Array append You can append elements to array with append function : function main() : int { var a = [1,2,3] append(a,4) for e in a { print(e) } return 0 } Importing Libraries Libraries can imported with use keyword : use os // multiple import : use os,file function main() : int { system(\"gcc --version\") return 0 } If var x = 1 var y = 2 function main() : int { if x == y { // something } else if not x != y { // something } else if x == y and x != 2 { // something } else if x != y or x == 10 { // something } else { // something } return 0 } if statements are pretty straightforward and similar to most other languages. Unlike other C-like languages, there are no parentheses surrounding the condition and the braces are always required. You can see Hascal's conditional operators, here For Loop function main() : int { var a = [1,2,3] for i in a { print(i) // prints elements of `a` variable } return 0 } While Loop function main() : int { var a = 1 while a <= 100 { print(a) a = a + 1 } return 0 } Structs struct Color { var r : int var g : int var b : int var name = \"Transparent\" // optional value } struct RGB : Color { // struct inheritance } function main() : int { var a : Color a.r = 1 a.g = 110 a.b = 255 print(a.r,a.g,a.b) var b = Color(34,156,255,\"AColor\") var c = RGB(255,0,0,\"AColor\") return 0 } Manual memory management You can use new and delete keywords for manual memory management : struct point { var x : int var y : int } function main() : int { var a : int* = new int(10) var b = new float(10.0) var c = new string(\"hello\") var d : point* = new point(point(10,10)) print(*a) print(*b) print(*c) print(*d) a = new int(20) print(*a) c = new string(*c + \" world\") print(*c) delete a delete b delete c delete d return 0 } Inline C++ Code You can use inline c++ code in hascal with cuse keyword : cuse '#include <cstdio>' cuse 'int main(){printf(\"%d\",1);return 0;}' // output : 1 Include C++ Code You can include C++ code in your Hascal file with cuse keyword : add.cc : int add(int x, int y) { return x + y; } add.hpp : // nothing but should be exist // if you want to include a c++ header file, you should include it in this file and not in `add.cc` // e.g : // #include <cmath> main.has : // if you want to include a local c file, use `local` keyword befor `use` keyword // but if you want to include a file in hascal standard library folder don't use `local` keyword local cuse add function add(a:int,b:int): int function main() : int { print(add(1,2)) return 0 }","title":"Hascal Documentation"},{"location":"#introduction","text":"Hascal is a general-purpose open source programming language that makes it easy to build simple,optimal, reliable, and efficient software.","title":"Introduction"},{"location":"#installation","text":"python setup.py install Now your Hascal compiler is ready to use in src/dist folder!!! NOTE: But you can add Hascal to $PATH for easily use.","title":"Installation"},{"location":"#hello-world","text":"function main() : int { print(\"Hello World\") return 0 } Save this snippet into a file named hello.has . Now do: hascal hello.has . Congratulations - you just wrote and executed your first Hascal program! As in many other languages (such as C++ and Rust), main is the entry point of your program. print is one of the few built-in functions. It prints the value passed to it to standard output.","title":"Hello World"},{"location":"#configjson","text":"You can use config.json to configure your Hascal compiler. compiler : your c++ compiler name(e.g : g++ , clang++ ) optimize : optimize level(0,1,2,3)(default : no optimize) flags : flags list for your compiler(e.g: [\"-pthread\"] ) no_check_g++ : if you don't use g++, set this to 1 c++_version : your c++ standard(e.g: c++17 or c++20 ).note: c++ version must be greater than or equal to c++17 g++_out : if you want to see g++ output, set this to 1 c++_out : if you want to see generated c++ code, set this to 1 example : { \"compiler\":\"g++\", \"optimize\":\"-O2\", \"flags\":[\"-pthread\"], \"no_check_g++\":1, \"c++_version\":\"c++17\", \"g++_out\":1, \"c++_out\":1 }","title":"config.json :"},{"location":"#comments","text":"// This is a single line comment","title":"Comments"},{"location":"#variables","text":"var foo : int var foobar : int = 1 var bar = 1 function main() : int { print(foo,foobar) return 0 }","title":"Variables"},{"location":"#non-nullable-and-nullable","text":"Hascal's variables and constants are non-nullable by default(i.e. they can't be NULL ), but you can make them nullable by using ? at the end of the type : var foo : int = 1 // non-nullable var bar : int? = 1 // nullable so you can use NULL to set a variable to NULL : foo = NULL // error bar = NULL // ok Also, you can make pointers to nullable variables : var foo : int^ = NULL // error var bar : int^? = NULL // ok","title":"Non nullable and nullable"},{"location":"#pointers","text":"var foo : int^ var foobar : int = ^foo var bar : int = 2 foo = &bar NOTE: pointers are non-nullable by default, use ? to make it nullable: var foo : int? foo = NULL","title":"Pointers"},{"location":"#functions","text":"function add(x:int,y:int): int { return x + y } // overloading function function add(x:int,y:int,z:int): int { return x + y + z } function add2(x:int,y:int){ print(x + y) } function main(): int { print(add(1,2)) print(add(1,2,3)) } Again, the type comes after : and : comes after the argument's name.","title":"Functions"},{"location":"#hascal-types","text":"","title":"Hascal Types"},{"location":"#primitive-types","text":"bool // boolean value string // string literal int8 uint8 // 8-bit integer int16 uint16 // 16-bit integer int int32 uint32 // 32-bit integer int64 uint64 // 64-bit integer float // floating point double // double floating point","title":"Primitive types"},{"location":"#strings","text":"function main() : int { var text = \"Hello World\" print(text[0]) // output : H var text2 = \"Hello\\tWorld\" print(text2) // output : Hello World return 0 }","title":"Strings"},{"location":"#string-operators","text":"function main() : int { var text = \"Hello \" print(text + \"World\") // output : Hello World return 0 } All operators in Hascal must have values of the same type on both sides. You cannot concatenate an integer to a string: function main() : int { var text = \"age = \" var age = 23 print(text + age) // error : Mismatched type 'string' and 'int' :2 return 0 } We have to either convert age to a string: function main() : int { var text = \"age = \" var age = 23 print(text + to_string(age)) // error : Mismatched type 'string' and 'int' :3 return 0 }","title":"String operators"},{"location":"#numbers","text":"function main() : int { var a : int = 123 // or : var a = 123 var b : float = 1.23 // or : var b = 1.24 var c : double = b // type compatibility var cc : int8 = c // type conversion return 0 } This will assign the value of 123 to a and 1.23 to b and 1.23 to c and 1 to cc .","title":"Numbers"},{"location":"#arrays","text":"","title":"Arrays"},{"location":"#basic-array-concepts","text":"Arrays are collections of data elements of the same type. They can be represented by a list of elements surrounded by brackets. The elements can be accessed by appending an index (starting with 0) in brackets to the array variable: function main() : int { var a = [1,2,3] // int array with length 3 var b = [1.0,2.0,3.0] // float array with length 3 print(a[0]) a[0] = 4 print(a[0]) return 0 }","title":"Basic Array Concepts"},{"location":"#array-initialization","text":"The basic initialization syntax is as described above. The type of an array is determined by the first element: [1, 2, 3] is an array of ints ( [int] ). [\"a\", \"b\"] is an array of strings ( [string] ).","title":"Array Initialization"},{"location":"#array-size","text":"You can get length of array's elements with len function : function main() : int { var a = [1,2,3] print(len(a)) // output : 3 }","title":"Array Size"},{"location":"#array-append","text":"You can append elements to array with append function : function main() : int { var a = [1,2,3] append(a,4) for e in a { print(e) } return 0 }","title":"Array append"},{"location":"#importing-libraries","text":"Libraries can imported with use keyword : use os // multiple import : use os,file function main() : int { system(\"gcc --version\") return 0 }","title":"Importing Libraries"},{"location":"#if","text":"var x = 1 var y = 2 function main() : int { if x == y { // something } else if not x != y { // something } else if x == y and x != 2 { // something } else if x != y or x == 10 { // something } else { // something } return 0 } if statements are pretty straightforward and similar to most other languages. Unlike other C-like languages, there are no parentheses surrounding the condition and the braces are always required. You can see Hascal's conditional operators, here","title":"If"},{"location":"#for-loop","text":"function main() : int { var a = [1,2,3] for i in a { print(i) // prints elements of `a` variable } return 0 }","title":"For Loop"},{"location":"#while-loop","text":"function main() : int { var a = 1 while a <= 100 { print(a) a = a + 1 } return 0 }","title":"While Loop"},{"location":"#structs","text":"struct Color { var r : int var g : int var b : int var name = \"Transparent\" // optional value } struct RGB : Color { // struct inheritance } function main() : int { var a : Color a.r = 1 a.g = 110 a.b = 255 print(a.r,a.g,a.b) var b = Color(34,156,255,\"AColor\") var c = RGB(255,0,0,\"AColor\") return 0 }","title":"Structs"},{"location":"#manual-memory-management","text":"You can use new and delete keywords for manual memory management : struct point { var x : int var y : int } function main() : int { var a : int* = new int(10) var b = new float(10.0) var c = new string(\"hello\") var d : point* = new point(point(10,10)) print(*a) print(*b) print(*c) print(*d) a = new int(20) print(*a) c = new string(*c + \" world\") print(*c) delete a delete b delete c delete d return 0 }","title":"Manual memory management"},{"location":"#inline-c-code","text":"You can use inline c++ code in hascal with cuse keyword : cuse '#include <cstdio>' cuse 'int main(){printf(\"%d\",1);return 0;}' // output : 1","title":"Inline C++ Code"},{"location":"#include-c-code","text":"You can include C++ code in your Hascal file with cuse keyword : add.cc : int add(int x, int y) { return x + y; } add.hpp : // nothing but should be exist // if you want to include a c++ header file, you should include it in this file and not in `add.cc` // e.g : // #include <cmath> main.has : // if you want to include a local c file, use `local` keyword befor `use` keyword // but if you want to include a file in hascal standard library folder don't use `local` keyword local cuse add function add(a:int,b:int): int function main() : int { print(add(1,2)) return 0 }","title":"Include C++ Code"},{"location":"CHANGELOG/","text":"Hascal's Changelog v1.3.9 v1.3.9-alpha.1 #### New features #### Changes - add `download`,`upload`,`post` functions to `http` library - `https` support for `http` library - add `windows` library(that includes `windows.h`) - add `browser` library to open urls in default browser(now only supports windows) #### Bug fixes - fix linker flag import bug in `cuse` statement #### Removed v1.3.8 #### New features - non-nullable and nullable variables #### Changes - change pointer unary from `*` to `^` - improve importing system #### Bug fixes - fix repetitious imports bug - fix #29 bug(by [@mmdbalkhi](https://github.com/mmdbalkhi)) #### Removed - remove `token` library v1.3.7 #### New features - manual memory management with `new` and `delete` keyword - functional programming paradigm - speed up compilation time - add `typeof` function - now can print arrays and structures - function decorators - `static` and `extern` decorator - multiple library import - improve importing system - improve stdlib architecture #### Bug fixes - fix scoping bug - fix `conv` library bug - fix conditions bug #### Removed - `export` library removed - `local use` statement removed v1.3.6 #### New features - more data types : `int8`,`uint8`,`int16`,`uint16`,`int32`,`uint32`,`int64`,`uint64`,`double` - type compatibility - multi line string - pointers and references var x : *int = 20 var y : int = 10 x = &y var z = *x // type : int // Pointers fix incomplete types on struct defination struct bar { var self : *bar } - add `sizeof` function #### Bug fixes - fix lexer bugs - check if function returns a value at end of string else show error - `main` function should returns int - fix `termcolor` library bugs - fix enum bugs #### Standart library - add `sdl2` wrapper - add `export` library for exporting to C(see : [haspy](https://github.com/bistcuite/haspy)) - add `crypto.sha256` for sha256 hashing #### Removed - `libcinfo` library removed v1.3.5 #### Standard library ##### Updated `os` : - add `compiler_name` function to get the name of the compiler - add `arch` function to get the architecture of the system - add `is_x86` function to check if the architecture is x86 - add `is_x64` function to check if the architecture is x64 - add `getenv` function to get an environment variable ##### Added - add `libcinfo` library to get information about the libc - add `termcolor` library to colorize the output ![assets/termcolor.png](assets/termcolor.png) #### Bug fixes - Fix incomplete type defination bug v1.3.4 #### New features - compiler option : now can generate c++ code from hascal code with `c++_code : 1` in `config.json` file - use `cuse` keyword to include c++ files. #### Bug fixes - Fix semantic analyser bugs - Fix standard library bug v1.3.3 #### New features - struct inheritance - can use `cuse` statement on struct declaration #### Bug fixes - Fix variable scope bug - Fix variable declaration bug - Fix semantic analyser bug v1.3.2 #### New features - `for in` statement - library manager - flag option - `cuse` statement #### Bug fixes - Fix semantic analyser bugs - Fix nested struct bug #### Removed - `for to` and `for downto` statement removed v1.3.1 #### New features - Basic Semantic Anaslyser #### Removed - remove semicolon from syntax","title":"Hascal's Changelog"},{"location":"CHANGELOG/#hascals-changelog","text":"v1.3.9 v1.3.9-alpha.1 #### New features #### Changes - add `download`,`upload`,`post` functions to `http` library - `https` support for `http` library - add `windows` library(that includes `windows.h`) - add `browser` library to open urls in default browser(now only supports windows) #### Bug fixes - fix linker flag import bug in `cuse` statement #### Removed v1.3.8 #### New features - non-nullable and nullable variables #### Changes - change pointer unary from `*` to `^` - improve importing system #### Bug fixes - fix repetitious imports bug - fix #29 bug(by [@mmdbalkhi](https://github.com/mmdbalkhi)) #### Removed - remove `token` library v1.3.7 #### New features - manual memory management with `new` and `delete` keyword - functional programming paradigm - speed up compilation time - add `typeof` function - now can print arrays and structures - function decorators - `static` and `extern` decorator - multiple library import - improve importing system - improve stdlib architecture #### Bug fixes - fix scoping bug - fix `conv` library bug - fix conditions bug #### Removed - `export` library removed - `local use` statement removed v1.3.6 #### New features - more data types : `int8`,`uint8`,`int16`,`uint16`,`int32`,`uint32`,`int64`,`uint64`,`double` - type compatibility - multi line string - pointers and references var x : *int = 20 var y : int = 10 x = &y var z = *x // type : int // Pointers fix incomplete types on struct defination struct bar { var self : *bar } - add `sizeof` function #### Bug fixes - fix lexer bugs - check if function returns a value at end of string else show error - `main` function should returns int - fix `termcolor` library bugs - fix enum bugs #### Standart library - add `sdl2` wrapper - add `export` library for exporting to C(see : [haspy](https://github.com/bistcuite/haspy)) - add `crypto.sha256` for sha256 hashing #### Removed - `libcinfo` library removed v1.3.5 #### Standard library ##### Updated `os` : - add `compiler_name` function to get the name of the compiler - add `arch` function to get the architecture of the system - add `is_x86` function to check if the architecture is x86 - add `is_x64` function to check if the architecture is x64 - add `getenv` function to get an environment variable ##### Added - add `libcinfo` library to get information about the libc - add `termcolor` library to colorize the output ![assets/termcolor.png](assets/termcolor.png) #### Bug fixes - Fix incomplete type defination bug v1.3.4 #### New features - compiler option : now can generate c++ code from hascal code with `c++_code : 1` in `config.json` file - use `cuse` keyword to include c++ files. #### Bug fixes - Fix semantic analyser bugs - Fix standard library bug v1.3.3 #### New features - struct inheritance - can use `cuse` statement on struct declaration #### Bug fixes - Fix variable scope bug - Fix variable declaration bug - Fix semantic analyser bug v1.3.2 #### New features - `for in` statement - library manager - flag option - `cuse` statement #### Bug fixes - Fix semantic analyser bugs - Fix nested struct bug #### Removed - `for to` and `for downto` statement removed v1.3.1 #### New features - Basic Semantic Anaslyser #### Removed - remove semicolon from syntax","title":"Hascal's Changelog"},{"location":"ROADMAP/","text":"Hascal's Roadmap v1.3.x ### Base - signals - null safety - redesign logo - js backend(`hascal2js`) - static variables ### Language - lambdas : var mythread = thread(@(1000,true){ print(\"hi\") }) ### Standard Library - `json`, `thread` library ### Library Manager - unistall library option","title":"Hascal's Roadmap"},{"location":"ROADMAP/#hascals-roadmap","text":"v1.3.x ### Base - signals - null safety - redesign logo - js backend(`hascal2js`) - static variables ### Language - lambdas : var mythread = thread(@(1000,true){ print(\"hi\") }) ### Standard Library - `json`, `thread` library ### Library Manager - unistall library option","title":"Hascal's Roadmap"},{"location":"cond_op/","text":"Conditional Operators Operator Description Example == Returns true if the operands are equal. var1 == var2 != Returns true if the operands are not equal. var1 != var2 > Returns true if the left operand is greater than the right operand. var1 > var2 >= Returns true if the left operand is greater than or equal to the right operand. var1 >= var2 < Returns true if the left operand is less than the right operand. var1 < var2 <= Returns true if the left operand is less than or equal to the right operand. var1 <= var2 and Returns true if the left operand and right operand are true var1 == 1 and var2 == 2 or Returns true if the left operand or right operand are true var1 == 1 or var2 == 2 not Returns true if the operand are false or if the operand is true returns false not true","title":"Conditional Operators"},{"location":"cond_op/#conditional-operators","text":"Operator Description Example == Returns true if the operands are equal. var1 == var2 != Returns true if the operands are not equal. var1 != var2 > Returns true if the left operand is greater than the right operand. var1 > var2 >= Returns true if the left operand is greater than or equal to the right operand. var1 >= var2 < Returns true if the left operand is less than the right operand. var1 < var2 <= Returns true if the left operand is less than or equal to the right operand. var1 <= var2 and Returns true if the left operand and right operand are true var1 == 1 and var2 == 2 or Returns true if the left operand or right operand are true var1 == 1 or var2 == 2 not Returns true if the operand are false or if the operand is true returns false not true","title":"Conditional Operators"},{"location":"ide/","text":"IDE Integration Vscode Extension Todo Vim extension Emacs extension Nano extension Atom plugin Notepad++ Extension Intellij Idea plugin","title":"IDE Integration"},{"location":"ide/#ide-integration","text":"Vscode Extension","title":"IDE Integration"},{"location":"ide/#todo","text":"Vim extension Emacs extension Nano extension Atom plugin Notepad++ Extension Intellij Idea plugin","title":"Todo"},{"location":"interfacing/","text":"Interfacing to C/C++ You can use C and C++ in Hascal. For example, we want to write a function for print abs of a value in c++ and use it in hascal, first create a folder with cpp name and create absprint.cc and absprint.hpp in created folder. absprint.cc : void absprint(int a){ std::cout << abs(a); } For use abs() function we should import it from c++ stdlib, for this purpose import it in absprint.hpp : absprint.hpp #include <cmath> Now can import this code in hascal, write this code in root folder of your project: local use cpp.absprint function absprint(a:int) : int function main() : int { absprint(-68) # output : 68 } You can write inline function,structs,... defines, in an external hascal file and import it in main file : absprint.has : local use cpp.absprint function absprint(a:int) : int main.has : local use absprint function main() : int { absprint(-68) # output : 68 }","title":"Interfacing to C\\C++"},{"location":"interfacing/#interfacing-to-cc","text":"You can use C and C++ in Hascal. For example, we want to write a function for print abs of a value in c++ and use it in hascal, first create a folder with cpp name and create absprint.cc and absprint.hpp in created folder. absprint.cc : void absprint(int a){ std::cout << abs(a); } For use abs() function we should import it from c++ stdlib, for this purpose import it in absprint.hpp : absprint.hpp #include <cmath> Now can import this code in hascal, write this code in root folder of your project: local use cpp.absprint function absprint(a:int) : int function main() : int { absprint(-68) # output : 68 } You can write inline function,structs,... defines, in an external hascal file and import it in main file : absprint.has : local use cpp.absprint function absprint(a:int) : int main.has : local use absprint function main() : int { absprint(-68) # output : 68 }","title":"Interfacing to C/C++"},{"location":"libmanager/","text":"Hascal Library Manager(HLM) HLM is default and builtin Hascal's library manager. Install a library $ hascal install <library name> example : $ hascal install log Uninstall a library $ hascal uninstall <library name> example : $ hascal uninstall log Publish your libraries Todo","title":"Library Mangaer"},{"location":"libmanager/#hascal-library-managerhlm","text":"HLM is default and builtin Hascal's library manager.","title":"Hascal Library Manager(HLM)"},{"location":"libmanager/#install-a-library","text":"$ hascal install <library name> example : $ hascal install log","title":"Install a library"},{"location":"libmanager/#uninstall-a-library","text":"$ hascal uninstall <library name> example : $ hascal uninstall log","title":"Uninstall a library"},{"location":"libmanager/#publish-your-libraries","text":"Todo","title":"Publish your libraries"},{"location":"stdlib/","text":"Hascal Standard Library Built-in Functions file os time math strings http random libcinfo termcolor crypto.sha256 Built-in functions print(...) : Standard Hascal's print function ReadStr() : Standard Hascal's read string function ReadInt() : Standard Hascal's read integer function ReadFloat() : Standard Hascal's read float function ReadBool() : Standard Hascal's read boolean function ReadChar() : Standard Hascal's read character function to_int(val:T) : Standard Hascal's convert to integer function to_float(val:T) : Standard Hascal's convert to float function to_bool(val:T) : Standard Hascal's convert to boolean function to_char(val:T) : Standard Hascal's convert to character function to_string(val:T) : Standard Hascal's convert to string function exit(exit_code:int) : Standard Hascal's exit function sizeof(T) : Standard Hascal's sizeof function typeof(T) : Standard Hascal's typeof function file read_file(file_name:string) : string : Read a file and return its content write_file(file_name:string,content:string) : Write a file os os_name() : string : Return OS name system() : Execute a command compiler_name() : string : Return compiler name arch() : string : Return architecture is_x86() : bool : Return true if architecture is x86 is_x64() : bool : Return true if architecture is x64 getenv(name:string) : string : Return environment variable time Work with time/date get_year():int : Get current year get_month():int : Get current month get_day():int : Get current day get_hour():int : Get current hour get_minute():int : Get current minute get_second():int : Get current second math Math Functions - sin(val:float):float : Returns sine of x - cos(val:float):float : Returns cosine of x - tan(val:float):float : Returns tangent of x - PI : float : PI number - fmax(x:float,y:float):float : Returns the larger of x and y(floating point). - fmin(x:float,y:float):float : Returns the smaller of x and y(floating point). - max(x:int,y:int):int : Returns the larger of x and y. - min(x:int,y:int):int : Returns the smaller of x and y. - abs(x:float):float : Calculates the absolute value of a number. strings Work with strings - is_alpha(c:char): bool : check if char is alphabetic - is_alphanum(c:char): bool : check if char is alphanumeric - is_number(c:char): bool : check if char is number - is_space(c:char): bool : check if char is space - is_lower(c:char): bool : check if char is lowercase - is_upper(c:char): bool : check if char is uppercase http HTTP client-server library - get(url:string) : string : get content from given url - post(url:string,post_data:string):string : post content to given url - download(url:string,path:string):bool : download and save a url to storage - upload(url:string,path:string):bool : upload a file to a url See Example for http library random Random number generator - random_int(max:int):int : Returns a random integer between 0 and max libcinfo Get information about libc - libc_name() : string : get name of libc termcolor Colorize text - cprint(txt:string,color:string) : print text in color - reset_color() : reset color Colors : - red - green - yellow - blue - magenta - cyan - white - black windows browser NOTE : Only supports windwos! open_newtab(url:string) : open urls in new tab with default browser crypto.sha256 SHA256 hash - generate_sha256(data:string) : string : return sha256 hash of string","title":"Standard Library"},{"location":"stdlib/#hascal-standard-library","text":"Built-in Functions file os time math strings http random libcinfo termcolor crypto.sha256","title":"Hascal Standard Library"},{"location":"stdlib/#built-in-functions","text":"print(...) : Standard Hascal's print function ReadStr() : Standard Hascal's read string function ReadInt() : Standard Hascal's read integer function ReadFloat() : Standard Hascal's read float function ReadBool() : Standard Hascal's read boolean function ReadChar() : Standard Hascal's read character function to_int(val:T) : Standard Hascal's convert to integer function to_float(val:T) : Standard Hascal's convert to float function to_bool(val:T) : Standard Hascal's convert to boolean function to_char(val:T) : Standard Hascal's convert to character function to_string(val:T) : Standard Hascal's convert to string function exit(exit_code:int) : Standard Hascal's exit function sizeof(T) : Standard Hascal's sizeof function typeof(T) : Standard Hascal's typeof function","title":"Built-in functions"},{"location":"stdlib/#file","text":"read_file(file_name:string) : string : Read a file and return its content write_file(file_name:string,content:string) : Write a file","title":"file"},{"location":"stdlib/#os","text":"os_name() : string : Return OS name system() : Execute a command compiler_name() : string : Return compiler name arch() : string : Return architecture is_x86() : bool : Return true if architecture is x86 is_x64() : bool : Return true if architecture is x64 getenv(name:string) : string : Return environment variable","title":"os"},{"location":"stdlib/#time","text":"Work with time/date get_year():int : Get current year get_month():int : Get current month get_day():int : Get current day get_hour():int : Get current hour get_minute():int : Get current minute get_second():int : Get current second","title":"time"},{"location":"stdlib/#math","text":"Math Functions - sin(val:float):float : Returns sine of x - cos(val:float):float : Returns cosine of x - tan(val:float):float : Returns tangent of x - PI : float : PI number - fmax(x:float,y:float):float : Returns the larger of x and y(floating point). - fmin(x:float,y:float):float : Returns the smaller of x and y(floating point). - max(x:int,y:int):int : Returns the larger of x and y. - min(x:int,y:int):int : Returns the smaller of x and y. - abs(x:float):float : Calculates the absolute value of a number.","title":"math"},{"location":"stdlib/#strings","text":"Work with strings - is_alpha(c:char): bool : check if char is alphabetic - is_alphanum(c:char): bool : check if char is alphanumeric - is_number(c:char): bool : check if char is number - is_space(c:char): bool : check if char is space - is_lower(c:char): bool : check if char is lowercase - is_upper(c:char): bool : check if char is uppercase","title":"strings"},{"location":"stdlib/#http","text":"HTTP client-server library - get(url:string) : string : get content from given url - post(url:string,post_data:string):string : post content to given url - download(url:string,path:string):bool : download and save a url to storage - upload(url:string,path:string):bool : upload a file to a url See Example for http library","title":"http"},{"location":"stdlib/#random","text":"Random number generator - random_int(max:int):int : Returns a random integer between 0 and max","title":"random"},{"location":"stdlib/#libcinfo","text":"Get information about libc - libc_name() : string : get name of libc","title":"libcinfo"},{"location":"stdlib/#termcolor","text":"Colorize text - cprint(txt:string,color:string) : print text in color - reset_color() : reset color Colors : - red - green - yellow - blue - magenta - cyan - white - black","title":"termcolor"},{"location":"stdlib/#windows","text":"","title":"windows"},{"location":"stdlib/#browser","text":"NOTE : Only supports windwos! open_newtab(url:string) : open urls in new tab with default browser","title":"browser"},{"location":"stdlib/#cryptosha256","text":"SHA256 hash - generate_sha256(data:string) : string : return sha256 hash of string","title":"crypto.sha256"}]}